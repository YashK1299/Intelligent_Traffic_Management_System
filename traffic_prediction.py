# -*- coding: utf-8 -*-
"""Traffic_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zCo6Lw7Kup2i9aggeV78Dka_yZczGjTT
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

dataframe = pd.read_csv(r'dataset/TrafficDataset10000.csv')
dataframe.head()

dataset = np.array(dataframe)

m = dataset.shape[0]

s= int(0.9*m)

train = dataset[:s,:]
test = dataset[s:,:]

train_predictors = train[:,:4]
train_labels = train[:,21]

test_predictors = test[:,:4]
test_labels = test[:,21]

#print(predictors)
#print(labels)

train_predictors = tf.convert_to_tensor(train_predictors.astype(float))
train_labels = tf.convert_to_tensor(train_labels.astype(float))
test_predictors = tf.convert_to_tensor(test_predictors.astype(float))
test_labels = tf.convert_to_tensor(test_labels.astype(float))

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Dense(units = 128, input_shape = [4], activation='relu'),
                                    tf.keras.layers.Dense(units = 64, activation='relu'),
                                    tf.keras.layers.Dense(units = 1)
                                   ])
model.summary()
model.compile(optimizer='adam',
                  loss='mean_squared_error',
                  )

history = model.fit(train_predictors, train_labels, epochs = 200, validation_data=(test_predictors, test_labels), batch_size = 150, steps_per_epoch=100, validation_steps = 10)

model.evaluate(test_predictors, test_labels)

x = model.predict(test_predictors)
y = test_labels

t = np.array(range(test_predictors.shape[0]))

print(x[1:10])
print(y[1:10])

plt.plot(t,y)
plt.plot(t,x)
plt.title("Comparison between predicted and actual values")
plt.ylabel('Optimum Time Cycle')
plt.xlabel('Time')
plt.legend(['Actual', 'Predicted'], loc='upper left')
plt.show()

plt.plot(t,y)
plt.show()

plt.plot(t,x)
plt.show()
